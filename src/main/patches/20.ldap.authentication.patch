--- deployerConfigContext.xml.orig	Mon May 12 15:15:03 2014
+++ deployerConfigContext.xml	Tue Dec 16 10:09:30 2014
@@ -54,6 +54,7 @@
     <bean id="authenticationManager" class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
         <constructor-arg>
             <map>
+                <entry key-ref="ldapAuthenticationHandler" value="#{null}"/>
                 <!--
                    | IMPORTANT
                    | Every handler requires a unique name.
@@ -61,7 +62,6 @@
                    | set its name to something other than its default name (typically the simple class name).
                    -->
                 <entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
-                <entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" />
             </map>
         </constructor-arg>
 
@@ -92,52 +92,121 @@
           class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
           p:httpClient-ref="httpClient" />
 
-    <!--
-       | TODO: Replace this component with one suitable for your enviroment.
-       |
-       | This component provides authentication for the kind of credential used in your environment. In most cases
-       | credential is a username/password pair that lives in a system of record like an LDAP directory.
-       | The most common authentication handler beans:
-       |
-       | * org.jasig.cas.authentication.LdapAuthenticationHandler
-       | * org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler
-       | * org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandler
-       | * org.jasig.cas.support.spnego.authentication.handler.support.JCIFSSpnegoAuthenticationHandler
-       -->
-    <bean id="primaryAuthenticationHandler"
-          class="org.jasig.cas.authentication.AcceptUsersAuthenticationHandler">
-        <property name="users">
-            <map>
-                <entry key="casuser" value="Mellon"/>
-            </map>
-        </property>
-    </bean>
-
     <!-- Required for proxy ticket mechanism -->
     <bean id="proxyPrincipalResolver"
           class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />
 
+    <bean id="baseDn" class="java.lang.String">
+        <constructor-arg type="java.lang.String" value="${ldap.baseDn}" />
+    </bean>
+
+    <bean id="usernameAttribute" class="java.lang.String">
+        <constructor-arg type="java.lang.String" value="uid" />
+    </bean>
+
+    <bean id="ldapAuthenticationHandler"
+          class="org.jasig.cas.authentication.LdapAuthenticationHandler"
+          p:principalIdAttribute="uid"
+          c:authenticator-ref="authenticator">
+        <property name="principalAttributeMap">
+            <map>
     <!--
-       | Resolves a principal from a credential using an attribute repository that is configured to resolve
-       | against a deployer-specific store (e.g. LDAP).
+                   | This map provides a simple attribute resolution mechanism.
+                   | Keys are LDAP attribute names, values are CAS attribute names.
+                   | Use this facility instead of a PrincipalResolver if LDAP is
+                   | the only attribute source.
        -->
-    <bean id="primaryPrincipalResolver"
-          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
-        <property name="attributeRepository" ref="attributeRepository" />
+                <entry key="member" value="member" />
+                <entry key="mail" value="mail" />
+                <entry key="uid" value="uid" />
+                <entry key="displayName" value="displayName" />
+            </map>
+        </property>
     </bean>
 
-    <!--
-    Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
-    may go against a database or LDAP server.  The id should remain "attributeRepository" though.
-    +-->
-    <bean id="attributeRepository" class="org.jasig.services.persondir.support.StubPersonAttributeDao"
-            p:backingMap-ref="attrRepoBackingMap" />
+    <bean id="authenticator" class="org.ldaptive.auth.Authenticator"
+          c:resolver-ref="dnResolver"
+          c:handler-ref="authHandler" />
+
+    <bean id="dnResolver" class="org.ldaptive.auth.PooledSearchDnResolver"
+          p:baseDn="${ldap.baseDn}"
+          p:allowMultipleDns="false"
+          p:connectionFactory-ref="searchPooledLdapConnectionFactory"
+          p:userFilter="${ldap.authn.searchFilter}" />
+
+    <bean id="searchPooledLdapConnectionFactory"
+          class="org.ldaptive.pool.PooledConnectionFactory"
+          p:connectionPool-ref="searchConnectionPool" />
+
+    <bean id="searchConnectionPool" parent="abstractConnectionPool"
+          p:connectionFactory-ref="searchConnectionFactory" />
+
+    <bean id="searchConnectionFactory"
+          class="org.ldaptive.DefaultConnectionFactory"
+          p:connectionConfig-ref="searchConnectionConfig" />
+
+    <bean id="searchConnectionConfig" parent="abstractConnectionConfig"
+          p:connectionInitializer-ref="bindConnectionInitializer" />
+
+    <bean id="bindConnectionInitializer"
+          class="org.ldaptive.BindConnectionInitializer"
+          p:bindDn="${ldap.managerDn}">
+        <property name="bindCredential">
+            <bean class="org.ldaptive.Credential"
+                  c:password="${ldap.managerPassword}" />
+        </property>
+    </bean>
     
-    <util:map id="attrRepoBackingMap">
-        <entry key="uid" value="uid" />
-        <entry key="eduPersonAffiliation" value="eduPersonAffiliation" /> 
-        <entry key="groupMembership" value="groupMembership" />
-    </util:map>
+    <bean id="abstractConnectionPool" abstract="true"
+          class="org.ldaptive.pool.BlockingConnectionPool"
+          init-method="initialize"
+          p:poolConfig-ref="ldapPoolConfig"
+          p:blockWaitTime="${ldap.pool.blockWaitTime}"
+          p:validator-ref="searchValidator"
+          p:pruneStrategy-ref="pruneStrategy" />
+
+    <bean id="abstractConnectionConfig" abstract="true"
+          class="org.ldaptive.ConnectionConfig"
+          p:ldapUrl="${ldap.url}"
+          p:connectTimeout="${ldap.connectTimeout}"
+          p:useStartTLS="${ldap.useStartTLS}"
+          p:sslConfig-ref="sslConfig" />
+
+    <bean id="ldapPoolConfig" class="org.ldaptive.pool.PoolConfig"
+          p:minPoolSize="${ldap.pool.minSize}"
+          p:maxPoolSize="${ldap.pool.maxSize}"
+          p:validateOnCheckOut="${ldap.pool.validateOnCheckout}"
+          p:validatePeriodically="${ldap.pool.validatePeriodically}"
+          p:validatePeriod="${ldap.pool.validatePeriod}" />
+
+    <bean id="sslConfig" class="org.ldaptive.ssl.SslConfig">
+        <property name="credentialConfig">
+            <bean class="org.ldaptive.ssl.X509CredentialConfig"
+                  p:trustCertificates="${ldap.trustedCert}" />
+        </property>
+    </bean>
+
+ <bean id="pruneStrategy" class="org.ldaptive.pool.IdlePruneStrategy"
+          p:prunePeriod="${ldap.pool.prunePeriod}"
+          p:idleTime="${ldap.pool.idleTime}" />
+
+    <bean id="searchValidator" class="org.ldaptive.pool.SearchValidator" />
+
+    <bean id="authHandler" class="org.ldaptive.auth.PooledBindAuthenticationHandler"
+          p:connectionFactory-ref="bindPooledLdapConnectionFactory" />
+
+              <bean id="bindPooledLdapConnectionFactory"
+          class="org.ldaptive.pool.PooledConnectionFactory"
+          p:connectionPool-ref="bindConnectionPool" />
+
+    <bean id="bindConnectionPool" parent="abstractConnectionPool"
+          p:connectionFactory-ref="bindConnectionFactory" />
+
+    <bean id="bindConnectionFactory"
+          class="org.ldaptive.DefaultConnectionFactory"
+          p:connectionConfig-ref="bindConnectionConfig" />
+
+    <bean id="bindConnectionConfig" parent="abstractConnectionConfig" />
 
     <!-- 
     Sample, in-memory data store for the ServiceRegistry. A real implementation
